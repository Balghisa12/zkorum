/* tslint:disable */
/* eslint-disable */
/**
 * ZKorum
 * ZKorum API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface IsEmailAvailableDTO
 */
export interface IsEmailAvailableDTO {
    /**
     * 
     * @type {string}
     * @memberof IsEmailAvailableDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface IsUsernameAvailableDTO
 */
export interface IsUsernameAvailableDTO {
    /**
     * 
     * @type {string}
     * @memberof IsUsernameAvailableDTO
     */
    'username': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IsEmailAvailableDTO} isEmailAvailableDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerIsEmailAvailable: async (isEmailAvailableDTO: IsEmailAvailableDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isEmailAvailableDTO' is not null or undefined
            assertParamExists('authControllerIsEmailAvailable', 'isEmailAvailableDTO', isEmailAvailableDTO)
            const localVarPath = `/auth/isEmailAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(isEmailAvailableDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IsUsernameAvailableDTO} isUsernameAvailableDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerIsUsernameAvailable: async (isUsernameAvailableDTO: IsUsernameAvailableDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isUsernameAvailableDTO' is not null or undefined
            assertParamExists('authControllerIsUsernameAvailable', 'isUsernameAvailableDTO', isUsernameAvailableDTO)
            const localVarPath = `/auth/isUsernameAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(isUsernameAvailableDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IsEmailAvailableDTO} isEmailAvailableDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerIsEmailAvailable(isEmailAvailableDTO: IsEmailAvailableDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerIsEmailAvailable(isEmailAvailableDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IsUsernameAvailableDTO} isUsernameAvailableDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerIsUsernameAvailable(isUsernameAvailableDTO: IsUsernameAvailableDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerIsUsernameAvailable(isUsernameAvailableDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IsEmailAvailableDTO} isEmailAvailableDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerIsEmailAvailable(isEmailAvailableDTO: IsEmailAvailableDTO, options?: any): AxiosPromise<boolean> {
            return localVarFp.authControllerIsEmailAvailable(isEmailAvailableDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IsUsernameAvailableDTO} isUsernameAvailableDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerIsUsernameAvailable(isUsernameAvailableDTO: IsUsernameAvailableDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerIsUsernameAvailable(isUsernameAvailableDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IsEmailAvailableDTO} isEmailAvailableDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerIsEmailAvailable(isEmailAvailableDTO: IsEmailAvailableDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerIsEmailAvailable(isEmailAvailableDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IsUsernameAvailableDTO} isUsernameAvailableDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerIsUsernameAvailable(isUsernameAvailableDTO: IsUsernameAvailableDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerIsUsernameAvailable(isUsernameAvailableDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



