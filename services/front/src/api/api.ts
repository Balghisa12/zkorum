/* tslint:disable */
/* eslint-disable */
/**
 * ZKorum
 * ZKorum backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthAuthenticatePost200Response
 */
export interface AuthAuthenticatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost200Response
     */
    'codeExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost200Response
     */
    'nextCodeSoonestTime': string;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409Response
 */
export interface AuthAuthenticatePost409Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'reason': AuthAuthenticatePost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409Response
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409Response
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
}

export const AuthAuthenticatePost409ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type AuthAuthenticatePost409ResponseReasonEnum = typeof AuthAuthenticatePost409ResponseReasonEnum[keyof typeof AuthAuthenticatePost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf
 */
export interface AuthAuthenticatePost409ResponseAnyOf {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf
     */
    'reason': AuthAuthenticatePost409ResponseAnyOfReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf
     */
    'userId': string;
}

export const AuthAuthenticatePost409ResponseAnyOfReasonEnum = {
    AwaitingSyncing: 'awaiting_syncing'
} as const;

export type AuthAuthenticatePost409ResponseAnyOfReasonEnum = typeof AuthAuthenticatePost409ResponseAnyOfReasonEnum[keyof typeof AuthAuthenticatePost409ResponseAnyOfReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1
 */
export interface AuthAuthenticatePost409ResponseAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'reason': AuthAuthenticatePost409ResponseAnyOf1ReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
}

export const AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = typeof AuthAuthenticatePost409ResponseAnyOf1ReasonEnum[keyof typeof AuthAuthenticatePost409ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
 */
export interface AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'active'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'revoked': Array<string>;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePostRequest
 */
export interface AuthAuthenticatePostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof AuthAuthenticatePostRequest
     */
    'email': string;
    /**
     * Decentralized Identifier with did:key method
     * @type {string}
     * @memberof AuthAuthenticatePostRequest
     */
    'didExchange': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthAuthenticatePostRequest
     */
    'isRequestingNewCode': boolean;
}
/**
 * 
 * @export
 * @interface AuthSyncPost409Response
 */
export interface AuthSyncPost409Response {
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPost409Response
     */
    'reason': AuthSyncPost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPost409Response
     */
    'userId': string;
}

export const AuthSyncPost409ResponseReasonEnum = {
    AlreadySyncing: 'already_syncing'
} as const;

export type AuthSyncPost409ResponseReasonEnum = typeof AuthSyncPost409ResponseReasonEnum[keyof typeof AuthSyncPost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthSyncPostRequest
 */
export interface AuthSyncPostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof AuthSyncPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPostRequest
     */
    'secretBlindedCredentialRequest'?: string;
}
/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200Response
 */
export interface AuthVerifyOtpPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthVerifyOtpPost200Response
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200Response
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'reason': AuthVerifyOtpPost200ResponseReasonEnum;
}

export const AuthVerifyOtpPost200ResponseReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess'
} as const;

export type AuthVerifyOtpPost200ResponseReasonEnum = typeof AuthVerifyOtpPost200ResponseReasonEnum[keyof typeof AuthVerifyOtpPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200ResponseAnyOf
 */
export interface AuthVerifyOtpPost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
}
/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200ResponseAnyOf1
 */
export interface AuthVerifyOtpPost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf1
     */
    'reason': AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum;
}

export const AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess'
} as const;

export type AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = typeof AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum[keyof typeof AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface AuthVerifyOtpPostRequest
 */
export interface AuthVerifyOtpPostRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthVerifyOtpPostRequest
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPostRequest
     */
    'encryptedSymmKey': string;
}
/**
 * 
 * @export
 * @interface CredentialsGetPost200Response
 */
export interface CredentialsGetPost200Response {
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof CredentialsGetPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof CredentialsGetPost200Response
     */
    'secretCredentialsPerType': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost: async (authAuthenticatePostRequest: AuthAuthenticatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authAuthenticatePostRequest' is not null or undefined
            assertParamExists('authAuthenticatePost', 'authAuthenticatePostRequest', authAuthenticatePostRequest)
            const localVarPath = `/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authAuthenticatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthSyncPostRequest} authSyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSyncPost: async (authSyncPostRequest: AuthSyncPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSyncPostRequest' is not null or undefined
            assertParamExists('authSyncPost', 'authSyncPostRequest', authSyncPostRequest)
            const localVarPath = `/auth/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSyncPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyOtpPost: async (authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authVerifyOtpPostRequest' is not null or undefined
            assertParamExists('authVerifyOtpPost', 'authVerifyOtpPostRequest', authVerifyOtpPostRequest)
            const localVarPath = `/auth/verifyOtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authVerifyOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsGetPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/credentials/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAuthenticatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAuthenticatePost(authAuthenticatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthSyncPostRequest} authSyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSyncPost(authSyncPostRequest: AuthSyncPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSyncPost(authSyncPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthVerifyOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyOtpPost(authVerifyOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialsGetPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialsGetPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: any): AxiosPromise<AuthAuthenticatePost200Response> {
            return localVarFp.authAuthenticatePost(authAuthenticatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthSyncPostRequest} authSyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSyncPost(authSyncPostRequest: AuthSyncPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.authSyncPost(authSyncPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: any): AxiosPromise<AuthVerifyOtpPost200Response> {
            return localVarFp.authVerifyOtpPost(authVerifyOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsGetPost(options?: any): AxiosPromise<CredentialsGetPost200Response> {
            return localVarFp.credentialsGetPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authAuthenticatePost(authAuthenticatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLogoutPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthSyncPostRequest} authSyncPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authSyncPost(authSyncPostRequest: AuthSyncPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authSyncPost(authSyncPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authVerifyOtpPost(authVerifyOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public credentialsGetPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).credentialsGetPost(options).then((request) => request(this.axios, this.basePath));
    }
}



