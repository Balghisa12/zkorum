/* tslint:disable */
/* eslint-disable */
/**
 * ZKorum
 * ZKorum backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthAuthenticatePost200Response
 */
export interface AuthAuthenticatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost200Response
     */
    'codeExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost200Response
     */
    'nextCodeSoonestTime': string;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409Response
 */
export interface AuthAuthenticatePost409Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'reason': AuthAuthenticatePost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409Response
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409Response
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409Response
     */
    'formCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof AuthAuthenticatePost409Response
     */
    'secretCredentialsPerType': AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}

export const AuthAuthenticatePost409ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type AuthAuthenticatePost409ResponseReasonEnum = typeof AuthAuthenticatePost409ResponseReasonEnum[keyof typeof AuthAuthenticatePost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf
 */
export interface AuthAuthenticatePost409ResponseAnyOf {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf
     */
    'reason': AuthAuthenticatePost409ResponseAnyOfReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf
     */
    'userId': string;
}

export const AuthAuthenticatePost409ResponseAnyOfReasonEnum = {
    AwaitingSyncing: 'awaiting_syncing'
} as const;

export type AuthAuthenticatePost409ResponseAnyOfReasonEnum = typeof AuthAuthenticatePost409ResponseAnyOfReasonEnum[keyof typeof AuthAuthenticatePost409ResponseAnyOfReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1
 */
export interface AuthAuthenticatePost409ResponseAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'reason': AuthAuthenticatePost409ResponseAnyOf1ReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'encryptedSymmKey': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'formCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1
     */
    'secretCredentialsPerType': AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}

export const AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type AuthAuthenticatePost409ResponseAnyOf1ReasonEnum = typeof AuthAuthenticatePost409ResponseAnyOf1ReasonEnum[keyof typeof AuthAuthenticatePost409ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
 */
export interface AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'active'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue
     */
    'revoked': Array<string>;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType
 */
export interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType {
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType
     */
    'unbound': AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound;
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType
     */
    'timebound': AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound
 */
export interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound {
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound
     */
    'active'?: AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive;
    /**
     * 
     * @type {Array<AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive>}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnbound
     */
    'revoked': Array<AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive>;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
 */
export interface AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive {
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
     */
    'blindedCredential': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
     */
    'encryptedBlinding': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerTypeUnboundActive
     */
    'encryptedBlindedSubject': string;
}
/**
 * 
 * @export
 * @interface AuthAuthenticatePostRequest
 */
export interface AuthAuthenticatePostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof AuthAuthenticatePostRequest
     */
    'email': string;
    /**
     * Decentralized Identifier with did:key method
     * @type {string}
     * @memberof AuthAuthenticatePostRequest
     */
    'didExchange': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthAuthenticatePostRequest
     */
    'isRequestingNewCode': boolean;
}
/**
 * 
 * @export
 * @interface AuthSyncPost409Response
 */
export interface AuthSyncPost409Response {
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPost409Response
     */
    'reason': AuthSyncPost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSyncPost409Response
     */
    'userId': string;
}

export const AuthSyncPost409ResponseReasonEnum = {
    AlreadySyncing: 'already_syncing'
} as const;

export type AuthSyncPost409ResponseReasonEnum = typeof AuthSyncPost409ResponseReasonEnum[keyof typeof AuthSyncPost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200Response
 */
export interface AuthVerifyOtpPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthVerifyOtpPost200Response
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200Response
     */
    'formCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof AuthVerifyOtpPost200Response
     */
    'secretCredentialsPerType': AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200Response
     */
    'reason': AuthVerifyOtpPost200ResponseReasonEnum;
}

export const AuthVerifyOtpPost200ResponseReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess',
    EncryptedSymmKeyRequired: 'encrypted_symm_key_required',
    UnboundSecretCredentialRequestRequired: 'unbound_secret_credential_request_required',
    TimeboundSecretCredentialRequestRequired: 'timebound_secret_credential_request_required',
    SecretCredentialRequestsRequired: 'secret_credential_requests_required'
} as const;

export type AuthVerifyOtpPost200ResponseReasonEnum = typeof AuthVerifyOtpPost200ResponseReasonEnum[keyof typeof AuthVerifyOtpPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200ResponseAnyOf
 */
export interface AuthVerifyOtpPost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'syncingDevices': Array<string>;
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'formCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf
     */
    'secretCredentialsPerType': AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}
/**
 * 
 * @export
 * @interface AuthVerifyOtpPost200ResponseAnyOf1
 */
export interface AuthVerifyOtpPost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPost200ResponseAnyOf1
     */
    'reason': AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum;
}

export const AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess',
    EncryptedSymmKeyRequired: 'encrypted_symm_key_required',
    UnboundSecretCredentialRequestRequired: 'unbound_secret_credential_request_required',
    TimeboundSecretCredentialRequestRequired: 'timebound_secret_credential_request_required',
    SecretCredentialRequestsRequired: 'secret_credential_requests_required'
} as const;

export type AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = typeof AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum[keyof typeof AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface AuthVerifyOtpPostRequest
 */
export interface AuthVerifyOtpPostRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthVerifyOtpPostRequest
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPostRequest
     */
    'encryptedSymmKey'?: string;
    /**
     * 
     * @type {AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest}
     * @memberof AuthVerifyOtpPostRequest
     */
    'timeboundSecretCredentialRequest'?: AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest;
    /**
     * 
     * @type {AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest}
     * @memberof AuthVerifyOtpPostRequest
     */
    'unboundSecretCredentialRequest'?: AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest;
}
/**
 * 
 * @export
 * @interface AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
 */
export interface AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
     */
    'blindedRequest': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
     */
    'encryptedEncodedBlindedSubject': string;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyOtpPostRequestTimeboundSecretCredentialRequest
     */
    'encryptedEncodedBlinding': string;
}
/**
 * 
 * @export
 * @interface CredentialGetPost200Response
 */
export interface CredentialGetPost200Response {
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof CredentialGetPost200Response
     */
    'emailCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof CredentialGetPost200Response
     */
    'formCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
    /**
     * 
     * @type {AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType}
     * @memberof CredentialGetPost200Response
     */
    'secretCredentialsPerType': AuthAuthenticatePost409ResponseAnyOf1SecretCredentialsPerType;
}
/**
 * 
 * @export
 * @interface CredentialRequestPost200Response
 */
export interface CredentialRequestPost200Response {
    /**
     * 
     * @type {{ [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; }}
     * @memberof CredentialRequestPost200Response
     */
    'formCredentialsPerEmail': { [key: string]: AuthAuthenticatePost409ResponseAnyOf1EmailCredentialsPerEmailValue; };
}
/**
 * 
 * @export
 * @interface CredentialRequestPostRequest
 */
export interface CredentialRequestPostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof CredentialRequestPostRequest
     */
    'email': string;
    /**
     * 
     * @type {CredentialRequestPostRequestFormCredentialRequest}
     * @memberof CredentialRequestPostRequest
     */
    'formCredentialRequest': CredentialRequestPostRequestFormCredentialRequest;
}
/**
 * 
 * @export
 * @interface CredentialRequestPostRequestFormCredentialRequest
 */
export interface CredentialRequestPostRequestFormCredentialRequest {
    /**
     * 
     * @type {string}
     * @memberof CredentialRequestPostRequestFormCredentialRequest
     */
    'type': CredentialRequestPostRequestFormCredentialRequestTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestFormCredentialRequest
     */
    'campus': CredentialRequestPostRequestFormCredentialRequestCampusEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestFormCredentialRequest
     */
    'program': CredentialRequestPostRequestFormCredentialRequestProgramEnum;
    /**
     * 
     * @type {CredentialRequestPostRequestFormCredentialRequestAnyOfCountries}
     * @memberof CredentialRequestPostRequestFormCredentialRequest
     */
    'countries': CredentialRequestPostRequestFormCredentialRequestAnyOfCountries;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestFormCredentialRequest
     */
    'admissionYear': number;
}

export const CredentialRequestPostRequestFormCredentialRequestTypeEnum = {
    Student: 'student',
    Alum: 'alum',
    Faculty: 'faculty'
} as const;

export type CredentialRequestPostRequestFormCredentialRequestTypeEnum = typeof CredentialRequestPostRequestFormCredentialRequestTypeEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestTypeEnum];
export const CredentialRequestPostRequestFormCredentialRequestCampusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type CredentialRequestPostRequestFormCredentialRequestCampusEnum = typeof CredentialRequestPostRequestFormCredentialRequestCampusEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestCampusEnum];
export const CredentialRequestPostRequestFormCredentialRequestProgramEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type CredentialRequestPostRequestFormCredentialRequestProgramEnum = typeof CredentialRequestPostRequestFormCredentialRequestProgramEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestProgramEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestFormCredentialRequestAnyOf
 */
export interface CredentialRequestPostRequestFormCredentialRequestAnyOf {
    /**
     * 
     * @type {string}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOf
     */
    'type': CredentialRequestPostRequestFormCredentialRequestAnyOfTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOf
     */
    'campus': CredentialRequestPostRequestFormCredentialRequestAnyOfCampusEnum;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOf
     */
    'program': CredentialRequestPostRequestFormCredentialRequestAnyOfProgramEnum;
    /**
     * 
     * @type {CredentialRequestPostRequestFormCredentialRequestAnyOfCountries}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOf
     */
    'countries': CredentialRequestPostRequestFormCredentialRequestAnyOfCountries;
    /**
     * 
     * @type {number}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOf
     */
    'admissionYear': number;
}

export const CredentialRequestPostRequestFormCredentialRequestAnyOfTypeEnum = {
    Student: 'student'
} as const;

export type CredentialRequestPostRequestFormCredentialRequestAnyOfTypeEnum = typeof CredentialRequestPostRequestFormCredentialRequestAnyOfTypeEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestAnyOfTypeEnum];
export const CredentialRequestPostRequestFormCredentialRequestAnyOfCampusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type CredentialRequestPostRequestFormCredentialRequestAnyOfCampusEnum = typeof CredentialRequestPostRequestFormCredentialRequestAnyOfCampusEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestAnyOfCampusEnum];
export const CredentialRequestPostRequestFormCredentialRequestAnyOfProgramEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type CredentialRequestPostRequestFormCredentialRequestAnyOfProgramEnum = typeof CredentialRequestPostRequestFormCredentialRequestAnyOfProgramEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestAnyOfProgramEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestFormCredentialRequestAnyOf1
 */
export interface CredentialRequestPostRequestFormCredentialRequestAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOf1
     */
    'type': CredentialRequestPostRequestFormCredentialRequestAnyOf1TypeEnum;
}

export const CredentialRequestPostRequestFormCredentialRequestAnyOf1TypeEnum = {
    Alum: 'alum'
} as const;

export type CredentialRequestPostRequestFormCredentialRequestAnyOf1TypeEnum = typeof CredentialRequestPostRequestFormCredentialRequestAnyOf1TypeEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestFormCredentialRequestAnyOf2
 */
export interface CredentialRequestPostRequestFormCredentialRequestAnyOf2 {
    /**
     * 
     * @type {string}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOf2
     */
    'type': CredentialRequestPostRequestFormCredentialRequestAnyOf2TypeEnum;
}

export const CredentialRequestPostRequestFormCredentialRequestAnyOf2TypeEnum = {
    Faculty: 'faculty'
} as const;

export type CredentialRequestPostRequestFormCredentialRequestAnyOf2TypeEnum = typeof CredentialRequestPostRequestFormCredentialRequestAnyOf2TypeEnum[keyof typeof CredentialRequestPostRequestFormCredentialRequestAnyOf2TypeEnum];

/**
 * 
 * @export
 * @interface CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
 */
export interface CredentialRequestPostRequestFormCredentialRequestAnyOfCountries {
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AD': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AQ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AX': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'AZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BB': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BD': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BJ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BQ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BV': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'BZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CD': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CV': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CX': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'CZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'DE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'DJ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'DK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'DM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'DO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'DZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'EC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'EE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'EG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'EH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ER': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ES': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ET': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'FI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'FJ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'FK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'FM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'FO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'FR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GB': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GD': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GP': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GQ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'GY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'HK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'HM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'HN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'HR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'HT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'HU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ID': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IQ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'IT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'JE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'JM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'JO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'JP': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KP': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'KZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LB': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LV': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'LY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MD': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ME': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ML': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MP': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MQ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MV': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MX': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'MZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NP': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'NZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'OM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'PY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'QA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'RE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'RO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'RS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'RU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'RW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SB': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SD': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SJ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ST': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SV': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SX': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'SZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TD': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TH': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TJ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TL': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TO': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TR': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TV': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'TZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'UA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'UG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'UM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'US': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'UY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'UZ': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'VA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'VC': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'VE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'VG': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'VI': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'VN': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'VU': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'WF': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'WS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'XK': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'YE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'YT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ZA': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ZM': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRequestPostRequestFormCredentialRequestAnyOfCountries
     */
    'ZW': boolean;
}
/**
 * 
 * @export
 * @interface FeedFetchMorePostRequest
 */
export interface FeedFetchMorePostRequest {
    /**
     * 
     * @type {string}
     * @memberof FeedFetchMorePostRequest
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface PollCreatePostRequest
 */
export interface PollCreatePostRequest {
    /**
     * 
     * @type {PollCreatePostRequestPoll}
     * @memberof PollCreatePostRequest
     */
    'poll': PollCreatePostRequestPoll;
    /**
     * 
     * @type {any}
     * @memberof PollCreatePostRequest
     */
    'pres'?: any;
}
/**
 * 
 * @export
 * @interface PollCreatePostRequestPoll
 */
export interface PollCreatePostRequestPoll {
    /**
     * 
     * @type {PollCreatePostRequestPollData}
     * @memberof PollCreatePostRequestPoll
     */
    'data': PollCreatePostRequestPollData;
    /**
     * 
     * @type {PollCreatePostRequestPollEligibility}
     * @memberof PollCreatePostRequestPoll
     */
    'eligibility'?: PollCreatePostRequestPollEligibility;
}
/**
 * 
 * @export
 * @interface PollCreatePostRequestPollData
 */
export interface PollCreatePostRequestPollData {
    /**
     * 
     * @type {string}
     * @memberof PollCreatePostRequestPollData
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof PollCreatePostRequestPollData
     */
    'option1': string;
    /**
     * 
     * @type {string}
     * @memberof PollCreatePostRequestPollData
     */
    'option2': string;
    /**
     * 
     * @type {string}
     * @memberof PollCreatePostRequestPollData
     */
    'option3'?: string;
    /**
     * 
     * @type {string}
     * @memberof PollCreatePostRequestPollData
     */
    'option4'?: string;
    /**
     * 
     * @type {string}
     * @memberof PollCreatePostRequestPollData
     */
    'option5'?: string;
    /**
     * 
     * @type {string}
     * @memberof PollCreatePostRequestPollData
     */
    'option6'?: string;
}
/**
 * 
 * @export
 * @interface PollCreatePostRequestPollEligibility
 */
export interface PollCreatePostRequestPollEligibility {
    /**
     * 
     * @type {boolean}
     * @memberof PollCreatePostRequestPollEligibility
     */
    'student'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PollCreatePostRequestPollEligibility
     */
    'alum'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PollCreatePostRequestPollEligibility
     */
    'faculty'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollCreatePostRequestPollEligibility
     */
    'countries'?: Array<PollCreatePostRequestPollEligibilityCountriesEnum>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PollCreatePostRequestPollEligibility
     */
    'campuses'?: Array<PollCreatePostRequestPollEligibilityCampusesEnum>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PollCreatePostRequestPollEligibility
     */
    'programs'?: Array<PollCreatePostRequestPollEligibilityProgramsEnum>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PollCreatePostRequestPollEligibility
     */
    'admissionYears'?: Array<number>;
}

export const PollCreatePostRequestPollEligibilityCountriesEnum = {
    Fr: 'FR',
    Int: 'INT'
} as const;

export type PollCreatePostRequestPollEligibilityCountriesEnum = typeof PollCreatePostRequestPollEligibilityCountriesEnum[keyof typeof PollCreatePostRequestPollEligibilityCountriesEnum];
export const PollCreatePostRequestPollEligibilityCampusesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type PollCreatePostRequestPollEligibilityCampusesEnum = typeof PollCreatePostRequestPollEligibilityCampusesEnum[keyof typeof PollCreatePostRequestPollEligibilityCampusesEnum];
export const PollCreatePostRequestPollEligibilityProgramsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type PollCreatePostRequestPollEligibilityProgramsEnum = typeof PollCreatePostRequestPollEligibilityProgramsEnum[keyof typeof PollCreatePostRequestPollEligibilityProgramsEnum];

/**
 * 
 * @export
 * @interface PollRespondPost200Response
 */
export interface PollRespondPost200Response {
    /**
     * 
     * @type {PollRespondPost200ResponseMetadata}
     * @memberof PollRespondPost200Response
     */
    'metadata': PollRespondPost200ResponseMetadata;
    /**
     * 
     * @type {PollRespondPost200ResponsePayload}
     * @memberof PollRespondPost200Response
     */
    'payload': PollRespondPost200ResponsePayload;
    /**
     * 
     * @type {PollRespondPost200ResponseAuthor}
     * @memberof PollRespondPost200Response
     */
    'author': PollRespondPost200ResponseAuthor;
    /**
     * 
     * @type {PollRespondPost200ResponseEligibility}
     * @memberof PollRespondPost200Response
     */
    'eligibility': PollRespondPost200ResponseEligibility;
}
/**
 * 
 * @export
 * @interface PollRespondPost200ResponseAuthor
 */
export interface PollRespondPost200ResponseAuthor {
    /**
     * 
     * @type {string}
     * @memberof PollRespondPost200ResponseAuthor
     */
    'domain': string;
    /**
     * 
     * @type {string}
     * @memberof PollRespondPost200ResponseAuthor
     */
    'type': PollRespondPost200ResponseAuthorTypeEnum;
    /**
     * 
     * @type {PollRespondPost200ResponseAuthorUniversity}
     * @memberof PollRespondPost200ResponseAuthor
     */
    'university'?: PollRespondPost200ResponseAuthorUniversity;
}

export const PollRespondPost200ResponseAuthorTypeEnum = {
    University: 'university',
    Company: 'company'
} as const;

export type PollRespondPost200ResponseAuthorTypeEnum = typeof PollRespondPost200ResponseAuthorTypeEnum[keyof typeof PollRespondPost200ResponseAuthorTypeEnum];

/**
 * 
 * @export
 * @interface PollRespondPost200ResponseAuthorUniversity
 */
export interface PollRespondPost200ResponseAuthorUniversity {
    /**
     * 
     * @type {string}
     * @memberof PollRespondPost200ResponseAuthorUniversity
     */
    'type': PollRespondPost200ResponseAuthorUniversityTypeEnum;
    /**
     * 
     * @type {PollRespondPost200ResponseAuthorUniversityStudent}
     * @memberof PollRespondPost200ResponseAuthorUniversity
     */
    'student'?: PollRespondPost200ResponseAuthorUniversityStudent;
}

export const PollRespondPost200ResponseAuthorUniversityTypeEnum = {
    Student: 'student',
    Alum: 'alum',
    Faculty: 'faculty'
} as const;

export type PollRespondPost200ResponseAuthorUniversityTypeEnum = typeof PollRespondPost200ResponseAuthorUniversityTypeEnum[keyof typeof PollRespondPost200ResponseAuthorUniversityTypeEnum];

/**
 * 
 * @export
 * @interface PollRespondPost200ResponseAuthorUniversityStudent
 */
export interface PollRespondPost200ResponseAuthorUniversityStudent {
    /**
     * 
     * @type {Array<string>}
     * @memberof PollRespondPost200ResponseAuthorUniversityStudent
     */
    'countries'?: Array<PollRespondPost200ResponseAuthorUniversityStudentCountriesEnum>;
    /**
     * 
     * @type {string}
     * @memberof PollRespondPost200ResponseAuthorUniversityStudent
     */
    'campus'?: string;
    /**
     * 
     * @type {string}
     * @memberof PollRespondPost200ResponseAuthorUniversityStudent
     */
    'program'?: string;
    /**
     * 
     * @type {number}
     * @memberof PollRespondPost200ResponseAuthorUniversityStudent
     */
    'admissionYear'?: number;
}

export const PollRespondPost200ResponseAuthorUniversityStudentCountriesEnum = {
    Ad: 'AD',
    Ae: 'AE',
    Af: 'AF',
    Ag: 'AG',
    Ai: 'AI',
    Al: 'AL',
    Am: 'AM',
    Ao: 'AO',
    Aq: 'AQ',
    Ar: 'AR',
    As: 'AS',
    At: 'AT',
    Au: 'AU',
    Aw: 'AW',
    Ax: 'AX',
    Az: 'AZ',
    Ba: 'BA',
    Bb: 'BB',
    Bd: 'BD',
    Be: 'BE',
    Bf: 'BF',
    Bg: 'BG',
    Bh: 'BH',
    Bi: 'BI',
    Bj: 'BJ',
    Bl: 'BL',
    Bm: 'BM',
    Bn: 'BN',
    Bo: 'BO',
    Bq: 'BQ',
    Br: 'BR',
    Bs: 'BS',
    Bt: 'BT',
    Bv: 'BV',
    Bw: 'BW',
    By: 'BY',
    Bz: 'BZ',
    Ca: 'CA',
    Cc: 'CC',
    Cd: 'CD',
    Cf: 'CF',
    Cg: 'CG',
    Ch: 'CH',
    Ci: 'CI',
    Ck: 'CK',
    Cl: 'CL',
    Cm: 'CM',
    Cn: 'CN',
    Co: 'CO',
    Cr: 'CR',
    Cu: 'CU',
    Cv: 'CV',
    Cw: 'CW',
    Cx: 'CX',
    Cy: 'CY',
    Cz: 'CZ',
    De: 'DE',
    Dj: 'DJ',
    Dk: 'DK',
    Dm: 'DM',
    Do: 'DO',
    Dz: 'DZ',
    Ec: 'EC',
    Ee: 'EE',
    Eg: 'EG',
    Eh: 'EH',
    Er: 'ER',
    Es: 'ES',
    Et: 'ET',
    Fi: 'FI',
    Fj: 'FJ',
    Fk: 'FK',
    Fm: 'FM',
    Fo: 'FO',
    Fr: 'FR',
    Ga: 'GA',
    Gb: 'GB',
    Gd: 'GD',
    Ge: 'GE',
    Gf: 'GF',
    Gg: 'GG',
    Gh: 'GH',
    Gi: 'GI',
    Gl: 'GL',
    Gm: 'GM',
    Gn: 'GN',
    Gp: 'GP',
    Gq: 'GQ',
    Gr: 'GR',
    Gs: 'GS',
    Gt: 'GT',
    Gu: 'GU',
    Gw: 'GW',
    Gy: 'GY',
    Hk: 'HK',
    Hm: 'HM',
    Hn: 'HN',
    Hr: 'HR',
    Ht: 'HT',
    Hu: 'HU',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    Im: 'IM',
    In: 'IN',
    Io: 'IO',
    Iq: 'IQ',
    Ir: 'IR',
    Is: 'IS',
    It: 'IT',
    Je: 'JE',
    Jm: 'JM',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kg: 'KG',
    Kh: 'KH',
    Ki: 'KI',
    Km: 'KM',
    Kn: 'KN',
    Kp: 'KP',
    Kr: 'KR',
    Kw: 'KW',
    Ky: 'KY',
    Kz: 'KZ',
    La: 'LA',
    Lb: 'LB',
    Lc: 'LC',
    Li: 'LI',
    Lk: 'LK',
    Lr: 'LR',
    Ls: 'LS',
    Lt: 'LT',
    Lu: 'LU',
    Lv: 'LV',
    Ly: 'LY',
    Ma: 'MA',
    Mc: 'MC',
    Md: 'MD',
    Me: 'ME',
    Mf: 'MF',
    Mg: 'MG',
    Mh: 'MH',
    Mk: 'MK',
    Ml: 'ML',
    Mm: 'MM',
    Mn: 'MN',
    Mo: 'MO',
    Mp: 'MP',
    Mq: 'MQ',
    Mr: 'MR',
    Ms: 'MS',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mw: 'MW',
    Mx: 'MX',
    My: 'MY',
    Mz: 'MZ',
    Na: 'NA',
    Nc: 'NC',
    Ne: 'NE',
    Nf: 'NF',
    Ng: 'NG',
    Ni: 'NI',
    Nl: 'NL',
    No: 'NO',
    Np: 'NP',
    Nr: 'NR',
    Nu: 'NU',
    Nz: 'NZ',
    Om: 'OM',
    Pa: 'PA',
    Pe: 'PE',
    Pf: 'PF',
    Pg: 'PG',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pm: 'PM',
    Pn: 'PN',
    Pr: 'PR',
    Ps: 'PS',
    Pt: 'PT',
    Pw: 'PW',
    Py: 'PY',
    Qa: 'QA',
    Re: 'RE',
    Ro: 'RO',
    Rs: 'RS',
    Ru: 'RU',
    Rw: 'RW',
    Sa: 'SA',
    Sb: 'SB',
    Sc: 'SC',
    Sd: 'SD',
    Se: 'SE',
    Sg: 'SG',
    Sh: 'SH',
    Si: 'SI',
    Sj: 'SJ',
    Sk: 'SK',
    Sl: 'SL',
    Sm: 'SM',
    Sn: 'SN',
    So: 'SO',
    Sr: 'SR',
    Ss: 'SS',
    St: 'ST',
    Sv: 'SV',
    Sx: 'SX',
    Sy: 'SY',
    Sz: 'SZ',
    Tc: 'TC',
    Td: 'TD',
    Tf: 'TF',
    Tg: 'TG',
    Th: 'TH',
    Tj: 'TJ',
    Tk: 'TK',
    Tl: 'TL',
    Tm: 'TM',
    Tn: 'TN',
    To: 'TO',
    Tr: 'TR',
    Tt: 'TT',
    Tv: 'TV',
    Tw: 'TW',
    Tz: 'TZ',
    Ua: 'UA',
    Ug: 'UG',
    Um: 'UM',
    Us: 'US',
    Uy: 'UY',
    Uz: 'UZ',
    Va: 'VA',
    Vc: 'VC',
    Ve: 'VE',
    Vg: 'VG',
    Vi: 'VI',
    Vn: 'VN',
    Vu: 'VU',
    Wf: 'WF',
    Ws: 'WS',
    Xk: 'XK',
    Ye: 'YE',
    Yt: 'YT',
    Za: 'ZA',
    Zm: 'ZM',
    Zw: 'ZW'
} as const;

export type PollRespondPost200ResponseAuthorUniversityStudentCountriesEnum = typeof PollRespondPost200ResponseAuthorUniversityStudentCountriesEnum[keyof typeof PollRespondPost200ResponseAuthorUniversityStudentCountriesEnum];

/**
 * 
 * @export
 * @interface PollRespondPost200ResponseEligibility
 */
export interface PollRespondPost200ResponseEligibility {
    /**
     * 
     * @type {Array<string>}
     * @memberof PollRespondPost200ResponseEligibility
     */
    'domains'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollRespondPost200ResponseEligibility
     */
    'types'?: Array<PollRespondPost200ResponseEligibilityTypesEnum>;
    /**
     * 
     * @type {PollRespondPost200ResponseEligibilityUniversity}
     * @memberof PollRespondPost200ResponseEligibility
     */
    'university'?: PollRespondPost200ResponseEligibilityUniversity;
}

export const PollRespondPost200ResponseEligibilityTypesEnum = {
    University: 'university',
    Company: 'company'
} as const;

export type PollRespondPost200ResponseEligibilityTypesEnum = typeof PollRespondPost200ResponseEligibilityTypesEnum[keyof typeof PollRespondPost200ResponseEligibilityTypesEnum];

/**
 * 
 * @export
 * @interface PollRespondPost200ResponseEligibilityUniversity
 */
export interface PollRespondPost200ResponseEligibilityUniversity {
    /**
     * 
     * @type {Array<string>}
     * @memberof PollRespondPost200ResponseEligibilityUniversity
     */
    'types'?: Array<PollRespondPost200ResponseEligibilityUniversityTypesEnum>;
    /**
     * 
     * @type {PollRespondPost200ResponseEligibilityUniversityStudent}
     * @memberof PollRespondPost200ResponseEligibilityUniversity
     */
    'student'?: PollRespondPost200ResponseEligibilityUniversityStudent;
}

export const PollRespondPost200ResponseEligibilityUniversityTypesEnum = {
    Student: 'student',
    Alum: 'alum',
    Faculty: 'faculty'
} as const;

export type PollRespondPost200ResponseEligibilityUniversityTypesEnum = typeof PollRespondPost200ResponseEligibilityUniversityTypesEnum[keyof typeof PollRespondPost200ResponseEligibilityUniversityTypesEnum];

/**
 * 
 * @export
 * @interface PollRespondPost200ResponseEligibilityUniversityStudent
 */
export interface PollRespondPost200ResponseEligibilityUniversityStudent {
    /**
     * 
     * @type {Array<string>}
     * @memberof PollRespondPost200ResponseEligibilityUniversityStudent
     */
    'countries'?: Array<PollRespondPost200ResponseEligibilityUniversityStudentCountriesEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollRespondPost200ResponseEligibilityUniversityStudent
     */
    'campuses'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollRespondPost200ResponseEligibilityUniversityStudent
     */
    'programs'?: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PollRespondPost200ResponseEligibilityUniversityStudent
     */
    'admissionYears'?: Array<number>;
}

export const PollRespondPost200ResponseEligibilityUniversityStudentCountriesEnum = {
    Ad: 'AD',
    Ae: 'AE',
    Af: 'AF',
    Ag: 'AG',
    Ai: 'AI',
    Al: 'AL',
    Am: 'AM',
    Ao: 'AO',
    Aq: 'AQ',
    Ar: 'AR',
    As: 'AS',
    At: 'AT',
    Au: 'AU',
    Aw: 'AW',
    Ax: 'AX',
    Az: 'AZ',
    Ba: 'BA',
    Bb: 'BB',
    Bd: 'BD',
    Be: 'BE',
    Bf: 'BF',
    Bg: 'BG',
    Bh: 'BH',
    Bi: 'BI',
    Bj: 'BJ',
    Bl: 'BL',
    Bm: 'BM',
    Bn: 'BN',
    Bo: 'BO',
    Bq: 'BQ',
    Br: 'BR',
    Bs: 'BS',
    Bt: 'BT',
    Bv: 'BV',
    Bw: 'BW',
    By: 'BY',
    Bz: 'BZ',
    Ca: 'CA',
    Cc: 'CC',
    Cd: 'CD',
    Cf: 'CF',
    Cg: 'CG',
    Ch: 'CH',
    Ci: 'CI',
    Ck: 'CK',
    Cl: 'CL',
    Cm: 'CM',
    Cn: 'CN',
    Co: 'CO',
    Cr: 'CR',
    Cu: 'CU',
    Cv: 'CV',
    Cw: 'CW',
    Cx: 'CX',
    Cy: 'CY',
    Cz: 'CZ',
    De: 'DE',
    Dj: 'DJ',
    Dk: 'DK',
    Dm: 'DM',
    Do: 'DO',
    Dz: 'DZ',
    Ec: 'EC',
    Ee: 'EE',
    Eg: 'EG',
    Eh: 'EH',
    Er: 'ER',
    Es: 'ES',
    Et: 'ET',
    Fi: 'FI',
    Fj: 'FJ',
    Fk: 'FK',
    Fm: 'FM',
    Fo: 'FO',
    Fr: 'FR',
    Ga: 'GA',
    Gb: 'GB',
    Gd: 'GD',
    Ge: 'GE',
    Gf: 'GF',
    Gg: 'GG',
    Gh: 'GH',
    Gi: 'GI',
    Gl: 'GL',
    Gm: 'GM',
    Gn: 'GN',
    Gp: 'GP',
    Gq: 'GQ',
    Gr: 'GR',
    Gs: 'GS',
    Gt: 'GT',
    Gu: 'GU',
    Gw: 'GW',
    Gy: 'GY',
    Hk: 'HK',
    Hm: 'HM',
    Hn: 'HN',
    Hr: 'HR',
    Ht: 'HT',
    Hu: 'HU',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    Im: 'IM',
    In: 'IN',
    Io: 'IO',
    Iq: 'IQ',
    Ir: 'IR',
    Is: 'IS',
    It: 'IT',
    Je: 'JE',
    Jm: 'JM',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kg: 'KG',
    Kh: 'KH',
    Ki: 'KI',
    Km: 'KM',
    Kn: 'KN',
    Kp: 'KP',
    Kr: 'KR',
    Kw: 'KW',
    Ky: 'KY',
    Kz: 'KZ',
    La: 'LA',
    Lb: 'LB',
    Lc: 'LC',
    Li: 'LI',
    Lk: 'LK',
    Lr: 'LR',
    Ls: 'LS',
    Lt: 'LT',
    Lu: 'LU',
    Lv: 'LV',
    Ly: 'LY',
    Ma: 'MA',
    Mc: 'MC',
    Md: 'MD',
    Me: 'ME',
    Mf: 'MF',
    Mg: 'MG',
    Mh: 'MH',
    Mk: 'MK',
    Ml: 'ML',
    Mm: 'MM',
    Mn: 'MN',
    Mo: 'MO',
    Mp: 'MP',
    Mq: 'MQ',
    Mr: 'MR',
    Ms: 'MS',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mw: 'MW',
    Mx: 'MX',
    My: 'MY',
    Mz: 'MZ',
    Na: 'NA',
    Nc: 'NC',
    Ne: 'NE',
    Nf: 'NF',
    Ng: 'NG',
    Ni: 'NI',
    Nl: 'NL',
    No: 'NO',
    Np: 'NP',
    Nr: 'NR',
    Nu: 'NU',
    Nz: 'NZ',
    Om: 'OM',
    Pa: 'PA',
    Pe: 'PE',
    Pf: 'PF',
    Pg: 'PG',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pm: 'PM',
    Pn: 'PN',
    Pr: 'PR',
    Ps: 'PS',
    Pt: 'PT',
    Pw: 'PW',
    Py: 'PY',
    Qa: 'QA',
    Re: 'RE',
    Ro: 'RO',
    Rs: 'RS',
    Ru: 'RU',
    Rw: 'RW',
    Sa: 'SA',
    Sb: 'SB',
    Sc: 'SC',
    Sd: 'SD',
    Se: 'SE',
    Sg: 'SG',
    Sh: 'SH',
    Si: 'SI',
    Sj: 'SJ',
    Sk: 'SK',
    Sl: 'SL',
    Sm: 'SM',
    Sn: 'SN',
    So: 'SO',
    Sr: 'SR',
    Ss: 'SS',
    St: 'ST',
    Sv: 'SV',
    Sx: 'SX',
    Sy: 'SY',
    Sz: 'SZ',
    Tc: 'TC',
    Td: 'TD',
    Tf: 'TF',
    Tg: 'TG',
    Th: 'TH',
    Tj: 'TJ',
    Tk: 'TK',
    Tl: 'TL',
    Tm: 'TM',
    Tn: 'TN',
    To: 'TO',
    Tr: 'TR',
    Tt: 'TT',
    Tv: 'TV',
    Tw: 'TW',
    Tz: 'TZ',
    Ua: 'UA',
    Ug: 'UG',
    Um: 'UM',
    Us: 'US',
    Uy: 'UY',
    Uz: 'UZ',
    Va: 'VA',
    Vc: 'VC',
    Ve: 'VE',
    Vg: 'VG',
    Vi: 'VI',
    Vn: 'VN',
    Vu: 'VU',
    Wf: 'WF',
    Ws: 'WS',
    Xk: 'XK',
    Ye: 'YE',
    Yt: 'YT',
    Za: 'ZA',
    Zm: 'ZM',
    Zw: 'ZW'
} as const;

export type PollRespondPost200ResponseEligibilityUniversityStudentCountriesEnum = typeof PollRespondPost200ResponseEligibilityUniversityStudentCountriesEnum[keyof typeof PollRespondPost200ResponseEligibilityUniversityStudentCountriesEnum];

/**
 * 
 * @export
 * @interface PollRespondPost200ResponseMetadata
 */
export interface PollRespondPost200ResponseMetadata {
    /**
     * 
     * @type {string}
     * @memberof PollRespondPost200ResponseMetadata
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof PollRespondPost200ResponseMetadata
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface PollRespondPost200ResponsePayload
 */
export interface PollRespondPost200ResponsePayload {
    /**
     * 
     * @type {PollCreatePostRequestPollData}
     * @memberof PollRespondPost200ResponsePayload
     */
    'data': PollCreatePostRequestPollData;
    /**
     * 
     * @type {PollRespondPost200ResponsePayloadResult}
     * @memberof PollRespondPost200ResponsePayload
     */
    'result': PollRespondPost200ResponsePayloadResult;
}
/**
 * 
 * @export
 * @interface PollRespondPost200ResponsePayloadResult
 */
export interface PollRespondPost200ResponsePayloadResult {
    /**
     * 
     * @type {number}
     * @memberof PollRespondPost200ResponsePayloadResult
     */
    'option1Response': number;
    /**
     * 
     * @type {number}
     * @memberof PollRespondPost200ResponsePayloadResult
     */
    'option2Response': number;
    /**
     * 
     * @type {number}
     * @memberof PollRespondPost200ResponsePayloadResult
     */
    'option3Response'?: number;
    /**
     * 
     * @type {number}
     * @memberof PollRespondPost200ResponsePayloadResult
     */
    'option4Response'?: number;
    /**
     * 
     * @type {number}
     * @memberof PollRespondPost200ResponsePayloadResult
     */
    'option5Response'?: number;
    /**
     * 
     * @type {number}
     * @memberof PollRespondPost200ResponsePayloadResult
     */
    'option6Response'?: number;
}
/**
 * 
 * @export
 * @interface PollRespondPostRequest
 */
export interface PollRespondPostRequest {
    /**
     * 
     * @type {PollRespondPostRequestResponseToPoll}
     * @memberof PollRespondPostRequest
     */
    'responseToPoll': PollRespondPostRequestResponseToPoll;
    /**
     * 
     * @type {any}
     * @memberof PollRespondPostRequest
     */
    'pres'?: any;
}
/**
 * 
 * @export
 * @interface PollRespondPostRequestResponseToPoll
 */
export interface PollRespondPostRequestResponseToPoll {
    /**
     * 
     * @type {string}
     * @memberof PollRespondPostRequestResponseToPoll
     */
    'pollUid': string;
    /**
     * 
     * @type {number}
     * @memberof PollRespondPostRequestResponseToPoll
     */
    'optionChosen': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost: async (authAuthenticatePostRequest: AuthAuthenticatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authAuthenticatePostRequest' is not null or undefined
            assertParamExists('authAuthenticatePost', 'authAuthenticatePostRequest', authAuthenticatePostRequest)
            const localVarPath = `/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authAuthenticatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSyncPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyOtpPost: async (authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authVerifyOtpPostRequest' is not null or undefined
            assertParamExists('authVerifyOtpPost', 'authVerifyOtpPostRequest', authVerifyOtpPostRequest)
            const localVarPath = `/auth/verifyOtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authVerifyOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialGetPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/credential/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialRequestPost: async (credentialRequestPostRequest: CredentialRequestPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentialRequestPostRequest' is not null or undefined
            assertParamExists('credentialRequestPost', 'credentialRequestPostRequest', credentialRequestPostRequest)
            const localVarPath = `/credential/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialRequestPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFetchMorePost: async (feedFetchMorePostRequest?: FeedFetchMorePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feed/fetchMore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFetchRecentPost: async (feedFetchMorePostRequest?: FeedFetchMorePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feed/fetchRecent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PollCreatePostRequest} pollCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollCreatePost: async (pollCreatePostRequest: PollCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pollCreatePostRequest' is not null or undefined
            assertParamExists('pollCreatePost', 'pollCreatePostRequest', pollCreatePostRequest)
            const localVarPath = `/poll/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pollCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PollRespondPostRequest} pollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollRespondPost: async (pollRespondPostRequest: PollRespondPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pollRespondPostRequest' is not null or undefined
            assertParamExists('pollRespondPost', 'pollRespondPostRequest', pollRespondPostRequest)
            const localVarPath = `/poll/respond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pollRespondPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAuthenticatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAuthenticatePost(authAuthenticatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSyncPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSyncPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthVerifyOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyOtpPost(authVerifyOtpPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialGetPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialGetPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async credentialRequestPost(credentialRequestPostRequest: CredentialRequestPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialRequestPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.credentialRequestPost(credentialRequestPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedFetchMorePost(feedFetchMorePostRequest?: FeedFetchMorePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PollRespondPost200Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedFetchMorePost(feedFetchMorePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedFetchRecentPost(feedFetchMorePostRequest?: FeedFetchMorePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PollRespondPost200Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedFetchRecentPost(feedFetchMorePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PollCreatePostRequest} pollCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pollCreatePost(pollCreatePostRequest: PollCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pollCreatePost(pollCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PollRespondPostRequest} pollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pollRespondPost(pollRespondPostRequest: PollRespondPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PollRespondPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pollRespondPost(pollRespondPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: any): AxiosPromise<AuthAuthenticatePost200Response> {
            return localVarFp.authAuthenticatePost(authAuthenticatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSyncPost(options?: any): AxiosPromise<void> {
            return localVarFp.authSyncPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: any): AxiosPromise<AuthVerifyOtpPost200Response> {
            return localVarFp.authVerifyOtpPost(authVerifyOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialGetPost(options?: any): AxiosPromise<CredentialGetPost200Response> {
            return localVarFp.credentialGetPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialRequestPost(credentialRequestPostRequest: CredentialRequestPostRequest, options?: any): AxiosPromise<CredentialRequestPost200Response> {
            return localVarFp.credentialRequestPost(credentialRequestPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFetchMorePost(feedFetchMorePostRequest?: FeedFetchMorePostRequest, options?: any): AxiosPromise<Array<PollRespondPost200Response>> {
            return localVarFp.feedFetchMorePost(feedFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedFetchRecentPost(feedFetchMorePostRequest?: FeedFetchMorePostRequest, options?: any): AxiosPromise<Array<PollRespondPost200Response>> {
            return localVarFp.feedFetchRecentPost(feedFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PollCreatePostRequest} pollCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollCreatePost(pollCreatePostRequest: PollCreatePostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.pollCreatePost(pollCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PollRespondPostRequest} pollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollRespondPost(pollRespondPostRequest: PollRespondPostRequest, options?: any): AxiosPromise<PollRespondPost200Response> {
            return localVarFp.pollRespondPost(pollRespondPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AuthAuthenticatePostRequest} authAuthenticatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authAuthenticatePost(authAuthenticatePostRequest: AuthAuthenticatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authAuthenticatePost(authAuthenticatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLogoutPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authSyncPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authSyncPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthVerifyOtpPostRequest} authVerifyOtpPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authVerifyOtpPost(authVerifyOtpPostRequest: AuthVerifyOtpPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authVerifyOtpPost(authVerifyOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public credentialGetPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).credentialGetPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CredentialRequestPostRequest} credentialRequestPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public credentialRequestPost(credentialRequestPostRequest: CredentialRequestPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).credentialRequestPost(credentialRequestPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedFetchMorePost(feedFetchMorePostRequest?: FeedFetchMorePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedFetchMorePost(feedFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeedFetchMorePostRequest} [feedFetchMorePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedFetchRecentPost(feedFetchMorePostRequest?: FeedFetchMorePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedFetchRecentPost(feedFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PollCreatePostRequest} pollCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pollCreatePost(pollCreatePostRequest: PollCreatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pollCreatePost(pollCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PollRespondPostRequest} pollRespondPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pollRespondPost(pollRespondPostRequest: PollRespondPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pollRespondPost(pollRespondPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



